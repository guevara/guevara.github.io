<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[一位有匠心的手艺人]]></title>
  <link href="http://guevara.github.io/atom.xml" rel="self"/>
  <link href="http://guevara.github.io/"/>
  <updated>2014-05-04T22:56:07+08:00</updated>
  <id>http://guevara.github.io/</id>
  <author>
    <name><![CDATA[bingo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[译]快速斐波那契算法]]></title>
    <link href="http://guevara.github.io/blog/2014/05/03/fast-fibonacci/"/>
    <updated>2014-05-03T08:55:00+08:00</updated>
    <id>http://guevara.github.io/blog/2014/05/03/fast-fibonacci</id>
    <content type="html"><![CDATA[<div class="note info">
  <h5>摘要</h5>
  <p>本文译自<a href="" target="_blank" title="http://hbfs.wordpress.com/2012/05/22/fast-fibonacci/">Fast Fibonacci</a></p>
</div>

<p><a href="http://en.wikipedia.org/wiki/Fibonacci_number">斐波那契数列</a>在诸多方面，从<a href="http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibnat.html#seeds">头状花序</a>到<a href="http://en.wikipedia.org/wiki/Universal_code_%28data_compression%29">通用编码</a>（如<a href="http://books.google.ca/books?id=81AfzW6vux4C&amp;pg=PA100&amp;lpg=PA100&amp;dq=%22taboo+codes%22&amp;source=bl&amp;ots=PVUooaK7Fm&amp;sig=hdBqPpvYlRNWskAMrVawTO6i_k4&amp;hl=en&amp;sa=X&amp;ei=P0WyT9qmLsqIgwfa34m7CQ&amp;redir_esc=y#v=onepage&amp;q=%22taboo%20codes%22&amp;f=false">禁忌编码</a>）表现出种种有趣的性质。研究高效计算斐氏数列的过程充满乐趣。</p>

<p>斐波那契数列的经典公式表示为如下递推形式：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

F_n=\begin{cases}
    1 & \mathrm{if~}n\leqslant{2} \\
    F_{n-1}+F_{n-2} &\mathrm{otherwise}
\end{cases}
 %]]&gt;</script>

<p>由此引出其直观（朴素）的递归实现：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_rec</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class="line">        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="k">else</span>
</span><span class="line">        <span class="k">return</span> <span class="n">fibo_rec</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">fibo_rec</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">2</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看上去很完美，可是计算<script type="math/tex">F_n</script>的过程中产生了<script type="math/tex">O(F_n)</script>次递归调用！运行时间呈指数增长（因为<script type="math/tex">F_n \approx \phi^n</script>，其中<script type="math/tex">\phi=\frac{1}{2}(1+\sqrt{5})</script>为黄金比例）。</p>

<p>通过显式地优化尾递可以消除递归调用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_iter</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint64_t</span> <span class="n">n_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n_2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">t</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">+</span> <span class="n">n_2</span><span class="p">;</span>
</span><span class="line">        <span class="n">n_2</span> <span class="o">=</span> <span class="n">n_1</span><span class="p">;</span>
</span><span class="line">        <span class="n">n_1</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">n_1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这次计算<script type="math/tex">F_n</script>的时间复杂度下降到<script type="math/tex">O(n)</script>，大大优于原始递归版本。迭代版本借助临时变量保存和，并使用移位寄存器将后继的<strong>斐波那契数列</strong>分别保存到<code>n_2</code>和<code>n_1</code>。有些人可能会忌讳临时变量，那么可以将上述代码重写为： </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_iter_var</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint64_t</span> <span class="n">n_1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n_2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span> <span class="p">(</span><span class="kt">uint64_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">n_1</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">+</span> <span class="n">n_2</span><span class="p">;</span>
</span><span class="line">        <span class="n">n_2</span> <span class="o">=</span> <span class="n">n_1</span> <span class="o">-</span> <span class="n">n_2</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">return</span> <span class="n">n_1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>n_2 = n_1 - n_2</code>部分化简得<code>n_1</code>（<script type="math/tex">n_2 \gets n_1 - n_2</script>，即<script type="math/tex">n_2 \gets (n_1 + n_2) - n_2</script>，结果为<script type="math/tex">n_2 \gets n_1</script>）。此处我们通过额外操作抵消掉临时变量，好坏别当别论。</p>

<center>&#8258;</center>

<p>是否有进一步优化的空间？根据以往的经验，线性时间似乎是最好的结果。无独有偶，有些聪明的家伙发现矩阵</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
       0 & 1 \\
       1 & 1 
    \end{array}
\right]
 %]]&gt;</script>

<p>具有“平移”并增加一个矢量分量的性质。比如</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        0 & 1 \\
        1 & 1
    \end{array}
\right]
\left[
    \begin{array}{c}
        a\\
        b
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        b\\
        a + b
    \end{array}
\right]
 %]]&gt;</script>

<p>看上去有几分眼熟吧。事实上我们将<code>a</code>代换为<script type="math/tex">F_ {n-2}</script>，<code>b</code>代换为<script type="math/tex">F_ {n-1}</script>，得</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        0 & 1\\
        1 & 1
    \end{array}
\right]
\left[
    \begin{array}{cc}
        F_{n-2}\\
        F_{n-1}
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        F_{n-2}\\
        F_{n-1} + F_{n-2}
    \end{array}
\right]
=
\left[
    \begin{array}{c}
        F_{n-1}\\
        F_n
    \end{array}
\right]
 %]]&gt;</script>

<p>有点眉目了！但这是基于已知<script type="math/tex">F_ {n-1}</script>和<script type="math/tex">F_ {n-2}</script>的前提下，一旦成立意味着存在（递归）分解形式：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        0 & 1\\
        1 & 1
    \end{array}
\right]
\left[
    \begin{array}{cc}
        F_{n-2}\\
        F_{n-1}
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        0 & 1\\
        1 & 1
    \end{array}
\right]
\left[
    \begin{array}{cc}
        0 & 1\\
        1 & 1
    \end{array}
\right]
\left[
    \begin{array}{cc}
        F_{n-3}\\
        F_{n-2}
    \end{array}
\right]
 %]]&gt;</script>

<p>反复如此迭代到初始条件<script type="math/tex">F_1 = 1</script>和<script type="math/tex">F_2 = 1</script>，那么有</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        0 & 1\\
        1 & 1
    \end{array}
\right]^n
\left[
    \begin{array}{c}
        1\\
        1
    \end{array}
\right]
=
\left[
    \begin{array}{c}
        F_{n-1}\\
        F_{n}
    \end{array}
\right]
 %]]&gt;</script>

<p>矩阵运算似乎代价不菲，至少要进行线性次数的矩阵乘法。幸运的是不需要那么多次，我们有办法在<script type="math/tex">O(\lg n)</script>时间复杂度内计算出<script type="math/tex">A^n</script>（此处矩阵维数为常数<script type="math/tex">2 \times{2}</script>，故可视矩阵乘积为常量）。如何计算呢？且观察式子<script type="math/tex">x^5 = (x^2)^2x</script>和<script type="math/tex">x^7 =((x^2)x)^2x</script>。整数情况时<script type="math/tex">x^n</script>计算过程如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">expo</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">            <span class="n">t</span> <span class="o">*=</span> <span class="n">y</span><span class="p">;</span>
</span><span class="line">        <span class="n">y</span> <span class="o">*=</span> <span class="n">y</span><span class="p">;</span>
</span><span class="line">        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>矩阵计算方式同理可得。以上代码中<code>t</code>为乘积当前值，<code>y</code>为乘积“平方”。给定两个矩阵</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_t & b_t \\
        c_t & d_t
    \end{array}
\right]
 %]]&gt;</script>

<p>和</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_y & b_y \\
        c_y & d_y
    \end{array}
\right]
 %]]&gt;</script>

<p>第一个初始化为单位阵，第二个初始化为斐波那契矩阵。根据矩阵的对称性，<script type="math/tex">c_t</script>和<script type="math/tex">c_y</script>各自恒等于<script type="math/tex">b_t</script>和<script type="math/tex">b_y</script>，这两个变量可以分别消掉。</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_t & b_t \\
        c_t & d_t
    \end{array}
\right]
\left[
    \begin{array}{cc}
        a_y & b_y \\
        c_y & d_y
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        a_t a_y + b_t b_y & a_t b_y + b_t d_y\\
        --- & b_t b_y + d_t d_y
    \end{array}
\right]
 %]]&gt;</script>

<p>和</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_y & b_y \\
        c_y & d_y
    \end{array}
\right]^2
=
\left[
    \begin{array}{cc}
        a_y^2 + b_y^2 & b_y(a_y + d_y)\\
        --- & b_y^2 + d_y^2
    \end{array}
\right]
 %]]&gt;</script>

<p>其中虚线位置表示对称部分。将上述式子代入幂函数，将有</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_expo</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint64_t</span> <span class="n">a_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b_t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">d_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// &quot;1&quot;</span>
</span><span class="line">            <span class="n">a_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b_y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">d_y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &quot;y&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">// t*=y;</span>
</span><span class="line">            <span class="kt">uint64_t</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">            <span class="kt">uint64_t</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">            <span class="kt">uint64_t</span> <span class="n">d</span> <span class="o">=</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">d_t</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">            <span class="n">a_t</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">            <span class="n">b_t</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">            <span class="n">d_t</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//y*=y;</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">a</span> <span class="o">=</span> <span class="n">a_y</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">b_y</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b_y</span> <span class="o">*</span> <span class="p">(</span><span class="n">a_y</span> <span class="o">+</span> <span class="n">d_y</span><span class="p">);</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">d</span> <span class="o">=</span> <span class="n">b_y</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">d_y</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">a_y</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">        <span class="n">b_y</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">        <span class="n">d_y</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">b_t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>提取出公共子式，改变赋值顺序，消除多余的临时变量，得</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_expo_var</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint64_t</span> <span class="n">a_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b_t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">d_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="c1">// &quot;1&quot;</span>
</span><span class="line">            <span class="n">a_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b_y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">d_y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &quot;y&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">// t*=y;</span>
</span><span class="line">            <span class="kt">uint64_t</span> <span class="n">bx</span> <span class="o">=</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">            <span class="n">b_t</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">            <span class="n">a_t</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">bx</span><span class="p">;</span>
</span><span class="line">            <span class="n">d_t</span> <span class="o">=</span> <span class="n">bx</span> <span class="o">+</span> <span class="n">d_t</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//y*=y;</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">b_y</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">        <span class="n">b_y</span> <span class="o">*=</span> <span class="p">(</span><span class="n">a_y</span> <span class="o">+</span> <span class="n">d_y</span><span class="p">);</span>
</span><span class="line">        <span class="n">a_y</span> <span class="o">=</span> <span class="n">a_y</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">b2</span><span class="p">;</span>
</span><span class="line">        <span class="n">d_y</span> <span class="o">=</span> <span class="n">b2</span> <span class="o">+</span> <span class="n">d_y</span> <span class="o">*</span> <span class="n">d_y</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">b_t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<center>&#8258;</center>

<p>太棒了，我们找着了一个<script type="math/tex">O(\lg n)</script>的算法来计算斐波那契数列。不过仍有稍加改进的余地。再怎么改进呢？且注意，</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a & b\\
        b & d
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        a & b\\
        b & a+b
    \end{array}
\right]
 %]]&gt;</script>

<p>这样一来消去变量<code>d</code>，得到仅包含变量<code>a</code>和<code>b</code>的方程。修改乘积项和平方项使其只包含变量<code>a</code>和<code>b</code>：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_t & b_t\\
        b_t & a_t + b_t
    \end{array}
\right]
\left[
    \begin{array}{cc}
        a_y & b_y\\
        b_y & a_y + b_y
    \end{array}
\right]
=
\left[
    \begin{array}{cc}
        a_ta_y+b_t + b_y & a_tb_y + b_t(ay+b_y)\\
        --- & ---
    \end{array}
\right]
 %]]&gt;</script>

<p>以及</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\left[
    \begin{array}{cc}
        a_y & b_y\\
        b_y & d_y
    \end{array}
\right]^2
=
\left[
    \begin{array}{cc}
        a_y^2+b_y^2 & a_yb_y+b_y(a_y+b_y)\\
        --- & ---
    \end{array}
\right]
 %]]&gt;</script>

<p>其中虚线表示无需关心的部分。利用上述结果，可得：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">uint64_t</span> <span class="nf">fibo_expo_var_2</span><span class="p">(</span><span class="kt">uint64_t</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">uint64_t</span> <span class="n">a_t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b_t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="c1">// &quot;1&quot;</span>
</span><span class="line">            <span class="n">a_y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b_y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// &quot;y&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
</span><span class="line">        <span class="p">{</span>
</span><span class="line">            <span class="c1">// t*=y;</span>
</span><span class="line">            <span class="kt">uint64_t</span> <span class="n">bx</span> <span class="o">=</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">            <span class="n">b_t</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">b_t</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">bx</span><span class="p">;</span>
</span><span class="line">            <span class="n">a_t</span> <span class="o">=</span> <span class="n">a_t</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">bx</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">
</span><span class="line">        <span class="c1">//y*=y;</span>
</span><span class="line">        <span class="kt">uint64_t</span> <span class="n">b2</span> <span class="o">=</span> <span class="n">b_y</span> <span class="o">*</span> <span class="n">b_y</span><span class="p">;</span>
</span><span class="line">        <span class="n">b_y</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">*</span> <span class="n">b_y</span> <span class="o">+</span> <span class="n">b2</span><span class="p">;</span>
</span><span class="line">        <span class="n">a_y</span> <span class="o">=</span> <span class="n">a_y</span> <span class="o">*</span> <span class="n">a_y</span> <span class="o">+</span> <span class="n">b2</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">b_t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这几个算法就运行速度比较结果如何？原始递归算法效率低得惊人，生成<script type="math/tex">F_ {50}</script>需要一分多钟，而其他算法只花费几微秒。进行10000000（1000万）次迭代测试（使用相同的随机输入，随机数n位于1到70之间），结果如下</p>

<table>
  <tbody>
    <tr>
      <td>iter</td>
      <td>3.29529s</td>
    </tr>
    <tr>
      <td>iter_var</td>
      <td>3.30153s</td>
    </tr>
    <tr>
      <td>expo</td>
      <td>2.28118s</td>
    </tr>
    <tr>
      <td>expo_var</td>
      <td>2.2531s</td>
    </tr>
    <tr>
      <td>expo_var_2</td>
      <td>2.22531s</td>
    </tr>
  </tbody>
</table>

<p><br />
最后三个版本的确快得多，但是快速乘幂算法版本之间的效率差距并不显著。假如改进程度相比迭代版本没有那么大的话，我们应该意识到刚只是计算相对较小的斐波那契数列。64位无符号整数最大仅允许存储<script type="math/tex">F_{92}</script>（因为<script type="math/tex">log_ \phi 2^{64} \approx 92</script>，<script type="math/tex">F_n \approx \phi^n</script>，所以两边取对数解出n，推出<script type="math/tex">\phi^n = 2^{64}</script>），不过通过大整数（抽象为类）来计算<script type="math/tex">F_{129713151}</script>，远比迭代方法和递归算法快得多得多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[译]设计模式滥用之Hello World]]></title>
    <link href="http://guevara.github.io/blog/2014/04/27/the-abuse-of-design-patterns-in-writing-a-hello-world-program/"/>
    <updated>2014-04-27T11:27:00+08:00</updated>
    <id>http://guevara.github.io/blog/2014/04/27/the-abuse-of-design-patterns-in-writing-a-hello-world-program</id>
    <content type="html"><![CDATA[<div class="note info">
  <h5>摘要</h5>
  <p>本文译自<a href="http://taskinoor.wordpress.com/2011/09/21/the-abuse-of-design-patterns-in-writing-a-hello-world-program/" target="_blank" title="The Abuse of Design Patterns in writing a Hello World Program">The Abuse of Design Patterns in writing a Hello World Program</a></p>
</div>

<blockquote><p>设计模式流行之初，我曾在某新闻组里看到一条评论，说有人号称他们试图倾尽23个GoF设计模式去编写一个奇葩程序。不过他们说最终没有成，极其所能也只用到其中20个。他们希望客户叫他们返工，没准能加塞另外3个。</p><p>试图用遍所有模式是行不通的，终将以生拼硬凑的设计告终——投机取巧的设计充满百无一用的灵活性。这年头软件太过复杂了。我们不能猜测还要什么，而应该关注于本该要什么。</p></blockquote>

<p><strong>gamma</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> </p>

<p>大家刚开始学习设计模式时，很少考虑模式的适用场景，想方设法到处套用，觉得模式用得越多，设计越好。结果产生大量不必要复杂的代码。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>与其说是“运用模式”，不如说是“滥用模式”。有人试图在<strong>Hello World</strong>程序中套用模式，不可避免地导致滥用。</p>

<p>让我们考察一个示例。这是一个经典问题： 编写一个程序，打印字符串<code>Hello World</code>至标准输出。</p>

<p>编程新手会写出如下代码（Java语言）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这段代码看起来超乎简单。能否加点设计模式？接下来…</p>

<p>首先，定义两个接口<code>Subject</code>和<code>Observer</code>，加入<strong>观察者模式</strong>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subject</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">);</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Observer</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后，定义两个类<code>HelloWorldSubject</code>和<code>HelloWorldObserver</code>实现以上两个接口。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldSubject</span> <span class="kd">implements</span> <span class="n">Subject</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">observers</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">String</span> <span class="n">str</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">HelloWorldSubject</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">observers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">attach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">observers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">detach</span><span class="o">(</span><span class="n">Observer</span> <span class="n">observer</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">observers</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">observer</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">notifyObservers</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Observer</span><span class="o">&gt;</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">observers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">while</span> <span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
</span><span class="line">            <span class="n">Observer</span> <span class="n">observer</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class="line">            <span class="n">observer</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getStr</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setStr</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">;</span>
</span><span class="line">        <span class="n">notifyObservers</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldObserver</span> <span class="kd">implements</span> <span class="n">Observer</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">HelloWorldSubject</span> <span class="n">sub</span> <span class="o">=</span> <span class="o">(</span><span class="n">HelloWorldSubject</span><span class="o">)</span><span class="n">subject</span><span class="o">;</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sub</span><span class="o">.</span><span class="na">getStr</span><span class="o">());</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>接着，再添加一个<strong>命令模式</strong>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Command</span> <span class="o">{</span>
</span><span class="line">    <span class="kt">void</span> <span class="nf">execute</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldCommand</span> <span class="kd">implements</span> <span class="n">Command</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="n">HelloWorldSubject</span> <span class="n">subject</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="nf">HelloWorldCommand</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="kd">super</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="o">(</span><span class="n">HelloWorldSubject</span><span class="o">)</span><span class="n">subject</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">execute</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">subject</span><span class="o">.</span><span class="na">setStr</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后添加一个<strong>抽象工厂模式</strong>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AbstractFactory</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Subject</span> <span class="nf">createSubject</span><span class="o">();</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Observer</span> <span class="nf">createObserver</span><span class="o">();</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorldFactory</span> <span class="kd">implements</span> <span class="n">AbstractFactory</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Subject</span> <span class="nf">createSubject</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">HelloWorldSubject</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Observer</span> <span class="nf">createObserver</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">HelloWorldObserver</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">Command</span> <span class="nf">createCommand</span><span class="o">(</span><span class="n">Subject</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="k">new</span> <span class="nf">HelloWorldCommand</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>再添加一个<strong>单例模式</strong>即大功告成。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FactoryMakerSingleton</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="kd">static</span> <span class="n">FactoryMakerSingleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">AbstractFactory</span> <span class="n">factory</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">    <span class="kd">private</span> <span class="nf">FactoryMakerSingleton</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HelloWorldFactory</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">FactoryMakerSingleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FactoryMakerSingleton</span><span class="o">();</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">
</span><span class="line">        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="n">AbstractFactory</span> <span class="nf">getFactory</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="k">return</span> <span class="n">factory</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后编写一个主类（用作测试）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AbuseDesignPatterns</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">AbstractFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="n">FactoryMakerSingleton</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getFactory</span><span class="o">();</span>
</span><span class="line">
</span><span class="line">        <span class="n">Subject</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createSubject</span><span class="o">();</span>
</span><span class="line">        <span class="n">subject</span><span class="o">.</span><span class="na">attach</span><span class="o">(</span><span class="n">factory</span><span class="o">.</span><span class="na">createObserver</span><span class="o">());</span>
</span><span class="line">
</span><span class="line">        <span class="n">Command</span> <span class="n">command</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createCommand</span><span class="o">(</span><span class="n">subject</span><span class="o">);</span>
</span><span class="line">
</span><span class="line">        <span class="n">command</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>程序运行输出： <code>Hello World</code></p>

<p>哇，我们已经在<strong>Hello World</strong>程序中成功地运用四种模式。（嗯，其实还能添加一个迭代器模式，不过已经引用了内置的迭代器，Java中经常如此）。这必须是一个拿得出手的设计呀。那么问题出在哪儿呢？</p>

<ol>
  <li>对于一个<strong>Hello World</strong>程序而言代码过于复杂。</li>
  <li>包含多余的灵活性。</li>
  <li>设计和实现的时间成本是彻彻底底的浪费。</li>
  <li>引发了类膨胀。</li>
  <li>违反了KISS原则。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></li>
  <li>没满足问题的要求。问题目的本在于学习打印标准输出，以上代码却缪以千里。</li>
</ol>

<h4 id="section">总结</h4>
<p>设计模式应具体场景具体运用，不要为运用而运用。设计模式是构建大型软件的强大工具。应恰到好处，切忌滥用。</p>

<p>从<a href="http://dl.dropbox.com/u/17612367/2011_09_21_abuse_design_patterns/AbuseDesignPatterns.zip">这儿</a>下载文中的代码。欢迎来函反馈。如果谁有办法在<strong>Hello World</strong>程序中堆砌更多设计模式，再好不过了。</p>

<h4 id="section-1">参考文章</h4>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.artima.com/lejava/articles/gammadp.html">如何运用设计模式</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>第13章：现实世界中的模式<a href="http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124">Head First设计模式</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://en.wikipedia.org/wiki/KISS_principle">KISS原则</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Octopress]]></title>
    <link href="http://guevara.github.io/blog/2014/04/21/hello/"/>
    <updated>2014-04-21T18:04:00+08:00</updated>
    <id>http://guevara.github.io/blog/2014/04/21/hello</id>
    <content type="html"><![CDATA[<h3 id="section">代码高亮测试</h3>

<p>c</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>七段码显示</span><a href="http://www.ioccc.org/2006/sykes2/sykes2.c">代码链接</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="n">main</span><span class="p">(</span><span class="n">_</span><span class="p">){</span><span class="n">_</span><span class="o">^</span><span class="mi">448</span><span class="o">&amp;&amp;</span><span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">_</span><span class="p">);</span><span class="n">putchar</span><span class="p">(</span><span class="o">--</span><span class="n">_</span><span class="o">%</span><span class="mi">64</span><span class="o">?</span><span class="mi">32</span><span class="o">|-~</span><span class="mi">7</span><span class="p">[</span><span class="n">__TIME__</span><span class="o">-</span><span class="n">_</span><span class="o">/</span><span class="mi">8</span><span class="o">%</span><span class="mi">8</span><span class="p">][</span><span class="s">&quot;&gt;&#39;txiZ^(~z?&quot;</span><span class="o">-</span><span class="mi">48</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="s">&quot;;;;====~$::199&quot;</span><span class="p">[</span><span class="n">_</span><span class="o">*</span><span class="mi">2</span><span class="o">&amp;</span><span class="mi">8</span><span class="o">|</span><span class="n">_</span><span class="o">/</span><span class="mi">64</span><span class="p">]</span><span class="o">/</span><span class="p">(</span><span class="n">_</span><span class="o">&amp;</span><span class="mi">2</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">8</span><span class="p">)</span><span class="o">%</span><span class="mi">8</span><span class="o">&amp;</span><span class="mi">1</span><span class="o">:</span><span class="mi">10</span><span class="p">);}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ruby</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Discover if a number is prime</span><a href="http://www.noulakaz.net/weblog/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">Source Article</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class="line">  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class="line">    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="latex">Latex数学公式测试</h3>

<p>行内公式$\exp(-\frac{x^2}{2})$测试</p>

<p>公式测试一</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<p>公式测试二</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

]]></content>
  </entry>
  
</feed>
